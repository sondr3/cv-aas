name: pipeline

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - "v*.*.*"

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      - name: build
        run: cargo test --no-run

      - name: test
        run: cargo test -- --nocapture --quiet

      - name: formatting
        run: cargo fmt --all -- --check

      - name: check
        run: cargo check

      - name: clippy
        run: cargo clippy -- -D warnings

  github_build:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Build release binaries
    needs: [check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl

      - uses: Swatinem/rust-cache@v2

      - name: setup Dhall
        run: |
          wget https://github.com/dhall-lang/dhall-haskell/releases/download/1.42.0/dhall-1.42.0-x86_64-linux.tar.bz2
          tar --extract --file dhall-*-x86_64-linux.tar.bz2
          cp ./bin/dhall /usr/local/bin
          wget https://github.com/dhall-lang/dhall-haskell/releases/download/1.42.0/dhall-json-1.7.12-x86_64-linux.tar.bz2
          tar --extract --file dhall-json-*-x86_64-linux.tar.bz2
          cp ./bin/dhall-to-json /usr/local/bin

      - name: Convert Dhall
        run: ./scripts/dhall.sh
        env:
          MY_PHONE: ${{ secrets.MY_PHONE }}
          MY_EMAIL: ${{ secrets.MY_EMAIL }}

      - name: Build LaTeX
        uses: xu-cheng/texlive-action@v3
        with:
          scheme: small
          run: |
            tlmgr update --self
            tlmgr install preprint fontawesome5 titlesec enumitem tcolorbox environ sourcesanspro tikzfill
            ./scripts/latex.sh

      - name: Install musl tools
        run: sudo apt-get install -y musl-tools libssl-dev

      - name: Build target
        run: cargo build --release --target x86_64-unknown-linux-musl

      - name: Prepare build artifacts
        run: |
          cd target/x86_64-unknown-linux-musl/release
          strip cv-aas
          mv cv-aas ../../../
          cd -

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: cv-aas
          path: cv-aas

      - name: Upload PDFs
        uses: actions/upload-artifact@v4
        with:
          name: resumes
          path: |
            data/SondreAasemoenCV.pdf
            data/SondreAasemoenCV-English.pdf

  publish_docker:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Publish Docker image
    needs: [github_build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get git tag
        run: echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: cv-aas
          path: .

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ghcr.io/sondr3/cv-aas:latest,ghcr.io/sondr3/cv-aas:${{ env.TAG }}
          build-args: |
            path=cv-aas

  create_release:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Create GitHub release
    needs: [github_build]
    runs-on: ubuntu-latest
    steps:
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: cv-aas
          path: .

      - name: Download resumes
        uses: actions/download-artifact@v4
        with:
          name: resumes
          path: .

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            cv-aas
            SondreAasemoenCV.pdf
            SondreAasemoenCV-English.pdf
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Deploy
    runs-on: ubuntu-latest
    needs: publish_docker
    steps:
      - name: Deploy application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            cd cv-aas
            git pull
            ./scripts/deploy.sh
