name: pipeline

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - "v*.*.*"

jobs:
  linting:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --workspace

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  test:
    name: Test Suite
    needs: [linting]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: Swatinem/rust-cache@v1

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: linux-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

  github_build:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Build release binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-musl

      - uses: Swatinem/rust-cache@v1
      - uses: dhall-lang/setup-dhall@v4

      - name: Convert Dhall
        run: ./scripts/dhall.sh

      - name: Build LaTeX
        uses: xu-cheng/texlive-action/small@v1
        with:
          run: |
            tlmgr install preprint fontawesome5 titlesec enumitem tcolorbox environ sourcesanspro
            ./scripts/latex.sh

      - name: Install musl tools
        run: sudo apt-get install -y musl-tools libssl-dev

      - name: Build target
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-unknown-linux-musl

      - name: Prepare build artifacts
        run: |
          cd target/x86_64-unknown-linux-musl/release
          strip cv-aas
          mv cv-aas ../../../
          cd -

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: cv-aas
          path: cv-aas

  publish_docker:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Publish Docker image
    needs: [test, github_build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get git tag
        run: echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Download Linux MUSL artifact
        uses: actions/download-artifact@v2
        with:
          name: cv-aas
          path: .

      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/sondr3/cv-aas:latest,ghcr.io/sondr3/cv-aas:${{ env.TAG }}
          build-args: |
            path=cv-aas

  deploy:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Deploy
    runs-on: ubuntu-latest
    needs: github_release_binary
    steps:
      - name: Deploy application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            cd cv-aas
            git pull
            ./deploy.sh
